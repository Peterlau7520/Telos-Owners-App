{"version":3,"sources":["../../src/pages/survey-types/survey-types.module.ts","../../src/pages/survey-types/survey-types.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACH;AAU7C;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAR7B,+DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,kEAAW;aACZ;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,kEAAW,CAAC;aACtC;SACF,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;;;;ACZY;AACe;AAGQ;AACN;AACA;AAQ3D;IASE,qBACS,OAAsB,EACtB,SAAoB,EAAS,cAA8B,EAC1D,WAAwB,EACxB,WAAwB;QAHzB,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAW;QAAS,mBAAc,GAAd,cAAc,CAAgB;QAC1D,gBAAW,GAAX,WAAW,CAAa;QACxB,gBAAW,GAAX,WAAW,CAAa;QAXlC,gBAAW,GAAG,EAAE,CAAC;QACjB,0BAAqB,GAAG,EAAE,CAAC;QAC3B,oBAAe,GAAQ,EAAE,CAAC;QAC1B,qBAAgB,GAAQ,EAAE,CAAC;QAC3B,kBAAa,GAAQ,EAAE,CAAC;QACxB,UAAK,GAAQ,EAAE,CAAC;QAOd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;QACvE,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAGD,oCAAc,GAAd;QACE,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAC5C,CAAC;IAED,sCAAgB,GAAhB;QACE,0BAA0B;IAC5B,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA0DI;IAEJ,oCAAc,GAAd;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAClC,CAAC;IAED,uCAAiB,GAAjB;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC;IA7FU,WAAW;QAJvB,gEAAS,CAAC;YACT,QAAQ,EAAE,mBAAmB;WACG;SACjC,CAAC;iKAW+B;YACX,4EAAkC,CAAc;YAC7C,4EAAW;YACX,QAAW;OAbvB,WAAW,CA+FvB;IAAD,CAAC;AAAA;SA/FY,WAAW,oB","file":"15.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { SurveyTypes } from './survey-types';\n\n@NgModule({\n  declarations: [\n    SurveyTypes,\n  ],\n  imports: [\n    IonicPageModule.forChild(SurveyTypes),\n  ],\n})\nexport class SurveyTypesModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/survey-types/survey-types.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport * as moment from 'moment';\n\nimport { LoadingService } from '../../providers/loading-service';\nimport { DataService } from '../../providers/data-service';\nimport { ShowMessage } from '../../providers/show-message';\nimport { HomePage } from '../../pages/home/home';\n\n@IonicPage()\n@Component({\n  selector: 'page-survey-types',\n  templateUrl: 'survey-types.html',\n})\nexport class SurveyTypes {\n\n  survey_list = [];\n  completed_survey_list = [];\n  new_survey_list: any = [];\n  past_survey_list: any = [];\n  loginResponse: any = {};\n  token: any = \"\";\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams, public loadingService: LoadingService,\n    private dataService: DataService,\n    private showMessage: ShowMessage) {\n    this.loginResponse = JSON.parse(localStorage.getItem(\"loginResponse\"));\n    this.token = localStorage.getItem(\"token\");\n  }\n\n\n  ionViewDidLoad() {\n    console.log('ionViewDidLoad SurveyTypes');\n  }\n\n  ionViewWillEnter() {\n    /* this.getAllSurves(); */\n  }\n\n  /* getAllSurves() {\n    this.loadingService.showLoading(\"my-loading-class\");\n    this.dataService.postData(\"allSurveys\", {\n      \"estateName\": this.loginResponse.user.estateName,\n      \"userId\": this.loginResponse.user._id\n    }, {\n        headers: {\n          'authorization': this.token\n        }\n      }).subscribe(results => {\n        if (results.success == true) {\n          this.new_survey_list = [];\n          this.past_survey_list = [];\n          this.survey_list = results.survey;\n          this.completed_survey_list = results.completedSurveys;\n          this.survey_list.forEach(normalSurvey => {\n            normalSurvey.completed_questions = [];\n            normalSurvey.is_completed = false;\n            normalSurvey.effectiveTo = moment(normalSurvey.effectiveTo).format('YYYY-MM-DD HH:mm');\n            this.completed_survey_list.forEach(completedSurvey => {\n              if (completedSurvey.surveyId == normalSurvey._id) {\n                normalSurvey.is_completed = true;\n                completedSurvey.userAnswer.forEach(userAnswerEle => {\n                  if (userAnswerEle.userId == this.loginResponse.user._id) {\n                    normalSurvey.completed_questions.push({ \"questionId\": userAnswerEle.optionId.questionId, \"optionNameEn\": userAnswerEle.optionId.optionNameEn, \"optionId\": userAnswerEle.optionId._id });\n                  }\n                });\n              }\n            });\n          });\n\n\n          this.survey_list.forEach(element => {\n            element.effectiveTo = moment(element.effectiveTo).format('YYYY-MM-DD HH:mm');\n            if (element.status == \"expired\") {\n              this.past_survey_list.push(element);\n            }\n            else {\n              this.new_survey_list.push(element);\n            }\n          });\n\n          console.log(\"past_survey_list\", this.past_survey_list);\n          console.log(\"new_survey_list\", this.new_survey_list);\n          this.loadingService.hideLoading();\n        }\n        else {\n          this.showMessage.showToastBottom(results.message);\n          this.loadingService.hideLoading();\n          if (results.message == \"Invalid token\" || results.message == \"Please login\") {\n            this.navCtrl.setRoot(HomePage);\n          }\n        }\n      }, err => {\n        console.log(\"err\", err);\n        this.loadingService.hideLoading();\n        this.showMessage.showToastBottom(\"網絡連接問題，請重試 | Unable to get Surveys, please try again.\");\n      });\n  } */\n\n  goToNewSurveys() {\n    this.navCtrl.push(\"SurveyList\");\n  }\n\n  goToSurveyResults() {\n    this.navCtrl.push(\"SurveyResults\");\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/survey-types/survey-types.ts"],"sourceRoot":""}